#!/opt/clmgr/python-310/bin/python3.10

import sys
import math
import random
import time
import io

import threading
from concurrent.futures.thread import ThreadPoolExecutor

from ClusterShell.NodeSet import NodeSet,expand
from ClusterShell.Task import Task, task_self

import cli

#ansible_playbook = "/opt/ncar/ansible/bin/ansible-playbook"
#inventory = "derecho_inventory.yml"
#playbook = "nwsc3-playbook.yml"
#vault_password_file = "/root/ansible.passwd"

# Parse cli optsions
args = cli.parser.parse_args()
print(args)

ansible_playbook_cmd = args.ansible_playbook_cmd
ansible_dir = args.ansible_dir
ansible_playbook = args.playbook
ansible_inventory = args.inventory_file
ansible_playbook = args.playbook
vault_password_file = args.vault_password_file

target_nodeset = args.limit
runner_nodeset = args.runners
nforks = args.forks

if args.check:
    check_mode = "--check"
else:
    check_mode = ""

if args.verbose > 0:
    print(f"Ansible Playbook cmd: {ansible_playbook_cmd}")
    print(f"Ansible Directory:    {ansible_dir}")
    print(f"Ansible playbook:     {ansible_playbook}")
    print(f"Ansible inventory:    {ansible_inventory}")
    print(f"Vault Password File:  {vault_password_file}")
    print(f"Target Nodes:         {target_nodeset}")
    print(f"Runner Nodes:         {runner_nodeset}")
    print(f"Fork Count:           {nforks}")

if len(target_nodeset) < nforks:
    cli.warn("nodeset count less than forks, setting forks to nodeset size.")
    nforks = len(target_nodeset)
    nsets = 1
else:
    nsets = math.ceil( len(target_nodeset) / nforks )

if args.verbose:
    print(f"Number of sets:  {nsets}")

subsets = []
for each in target_nodeset.split(nsets):
    subsets.append(each)

# Get Runners
alive_cmd = "/usr/bin/nproc"
R = task_self()
R.run(alive_cmd,nodes=runner_nodeset)

for rc,nodelist in R.iter_retcodes():
    n = NodeSet.fromlist(nodelist)
    print(f"{n} (RC={rc})")

    # if anything does not return 0a
    if rc != 0:
        runner_nodeset.remove(n)

if len(runner_nodeset) == 0:
    print("Fatal Error: no runners suitable. Exiting.")
    sys.exit(1)

for output, nodelist in R.iter_buffers():
    print(f"{NodeSet.fromlist(nodelist)}: {output.message()}")

print(f"Suitable runners: {runner_nodeset}")


# Determine whether or not we should pack and/or spread the load. May need to
# modify up a bit with the nsets


# Send the vault password file to runners


# Send the ansible-directory to the runners. 
# This shouldn't be HUGE, but NFS is possible too which is what was used in PoC




# Generate the commands needing to be run against specific nodes from arbitrary runner
cmds = []
for s in subsets:
    # Create Target Range for Ansible
    i=",".join(expand(s))
    if args.verbose > 0:
        print(f"Nodes in subset: {len(s)}")

    # Generate Commands
    #playbook_cmd = f"cd /opt/ncar/hsg-ansible; {ansible_playbook} -i {inventory} -f {nforks} --limit {i} --vault-password-file {vault_password_file} {playbook} &>> /tmp/ansible.clushible.cpu"
    playbook_cmd = f"cd {ansible_dir} ; {ansible_playbook_cmd} -i {ansible_inventory} -f {nforks} --limit {i} --vault-password-file {vault_password_file} {ansible_playbook} &>> /tmp/ansible.clushible.log"

    # Add to list
    cmds.append(playbook_cmd)

for cmd in cmds:
    print(f"Command: {cmd}")

# Create a series of tasks list
T = task_self()

# wrapper around tasks to run under threads
def run_task(cmd):
    # Get threadid
    th = threading.current_thread()
    #t = task_self()
    t = Task(th)
    n = thread_to_runner[th.ident]
    print(f"Runner {n}: {cmd}") 
    t.run(cmd,nodes=n)
    t.join()
    return t.max_retcode()

def check_th(silly):
    th = threading.current_thread()
    #print(threading.get_ident())
    time.sleep(1)

grange=[i for i in range(len(runner_nodeset))]
thread_to_runner = dict()

# Too lame to create my own thread pool
with ThreadPoolExecutor(max_workers=len(runner_nodeset)) as executor:
    main_th = threading.current_thread()
    for i in grange:
        executor.submit(check_th,i)
    
    r_list = list(runner_nodeset)
    for i in threading.enumerate():
        if main_th == i: continue
        thread_to_runner[i.ident] = r_list.pop(0)

    print(thread_to_runner)

    for c in cmds:
        executor.submit(run_task,c)

sys.exit(0)

for c in cmds:
    T.run(c,nodes=random.choice(list(runners)))
    for buf,nodelist in T.iter_buffers():
        print(buf.message())

    print(T.max_retcode())

print("Done")
